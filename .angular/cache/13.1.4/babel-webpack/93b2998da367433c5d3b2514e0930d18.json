{"ast":null,"code":"import { User } from './login.model';\nimport { Subject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let LoginService = /*#__PURE__*/(() => {\n  class LoginService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.URL = '/api/v1/users/login';\n      this.user = new Subject();\n    }\n\n    login(email, password) {\n      return this.http.post(this.URL, {\n        email: email,\n        password: password,\n        returnSecureToken: true\n      }).pipe( // catchError(this.handleError),\n      tap(responseData => {\n        //console.log(responseData);\n        this.handleAuthentication(responseData.email, responseData.localId, responseData.idToken, +responseData.expiresIn);\n      }));\n    }\n\n    handleAuthentication(email, userId, token, expiresIn) {\n      const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\n      const user = new User(email, userId, token, expirationDate);\n      this.user.next(user);\n    } // handleAuthentication(email: any, localId: any, idToken: any, arg3: number) {\n    //   throw new Error(\"Method not implemented.\");\n    // }\n    // handleError(handleError: any): import(\"rxjs\").OperatorFunction<Object, any> {\n    //   throw new Error(\"Method not implemented.\");\n    // }\n    // private handleError(errorRes: HttpErrorResponse) {\n    //   let errorMessage = 'An unknown error occurred!';\n    //   if (!errorRes.error || !errorRes.error.error) {\n    //     return throwError(errorMessage);\n    //   }\n    //   switch (errorRes.error.error.message) {\n    //     case 'EMAIL_EXISTS':\n    //       errorMessage = 'This email exists already';\n    //       break;\n    //     case 'EMAIL_NOT_FOUND':\n    //       errorMessage = 'This email does not exist.';\n    //       break;\n    //     case 'INVALID_PASSWORD':\n    //       errorMessage = 'This password is not correct.';\n    //       break;\n    //   }\n    //   return throwError(errorMessage);\n    // }\n\n\n    logout() {\n      this.user.next(null);\n      this.router.navigate(['/login']);\n    }\n\n  }\n\n  LoginService.ɵfac = function LoginService_Factory(t) {\n    return new (t || LoginService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  LoginService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoginService,\n    factory: LoginService.ɵfac,\n    providedIn: 'root'\n  });\n  return LoginService;\n})();","map":null,"metadata":{},"sourceType":"module"}